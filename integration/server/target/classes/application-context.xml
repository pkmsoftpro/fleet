<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans SYSTEM  "spring-beans.dtd">
<beans default-autowire="byName">

    <!-- ========================= RESOURCE DEFINITIONS ========================= -->
    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <!-- (in this case, JDBC-related settings for the dataSource definition below) -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="file:${TWMS_HOME}/${TWMS_ENV_MODE}/integration-server.properties"/>
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName" value="java:comp/env/jdbc/integration-ds"/>
    </bean>
    <bean id="log4jInitialization"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetClass" value="org.springframework.util.Log4jConfigurer"/>
        <property name="targetMethod" value="initLogging"/>
        <property name="arguments">
            <list>
                <value>${TWMS_HOME}/${TWMS_ENV_MODE}/integration-log4j.xml</value>
            </list>
        </property>
    </bean>

	    <import resource="classpath:quartz-jobs-context.xml"/>

    <bean id="messageFactory" class="org.springframework.ws.soap.saaj.SaajSoapMessageFactory">
        <property name="messageFactory">
            <bean class="com.sun.xml.internal.messaging.saaj.soap.ver1_1.SOAPMessageFactory1_1Impl"/>
        </property>    
    </bean>

    <bean id="webServiceTemplate" class="org.springframework.ws.client.core.WebServiceTemplate">
        <constructor-arg ref="messageFactory"/>
        <property name="messageSender">
            <bean class="org.springframework.ws.transport.http.CommonsHttpMessageSender">
                <property name="credentials">
                    <bean class="org.apache.commons.httpclient.UsernamePasswordCredentials">
                        <constructor-arg value="${webservices.username}"/>
                        <constructor-arg value="${webservices.password}"/>
                    </bean>
                </property>
            </bean>
        </property>
    </bean>


    <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="velocityProperties">
            <value>
		resource.loader=class
		class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
            </value>
        </property>
    </bean>

    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${tavant.email.smtp-server}"/>
    </bean>

    <bean id="sendEmailService" class="tavant.fleet.integration.server.common.SendEmailServiceImpl" />


    <bean class="org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor"/>

    <bean id="namingStrategy" class="org.hibernate.cfg.ImprovedNamingStrategy"/>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="annotatedClasses">
            <list>
                <value>
                    tavant.fleet.integration.server.common.dataaccess.SyncTracker
                </value>
                <value>
                    tavant.fleet.integration.server.common.dataaccess.SyncStatus
                </value>
                <value>
                    tavant.fleet.integration.server.common.dataaccess.SyncType
                </value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">
                    ${hibernate.dialect}
                </prop>
                <prop key="hibernate.show_sql">
                    ${hibernate.show_sql}
                </prop>
                <prop key="hibernate.format_sql">
                    ${hibernate.format_sql}
                </prop>
                <prop key="hibernate.use_sql_comments">
                    ${hibernate.use_sql_comments}
                </prop>
                <prop key="hibernate.generate_statistics">true</prop>
                <prop key="hibernate.default_batch_fetch_size">25</prop>
                <prop key="hibernate.cache.provider_class">
                    org.hibernate.cache.HashtableCacheProvider
                </prop>
                <prop key="hibernate.hbm2ddl.auto">
                    ${hibernate.hbm2ddl}
                </prop>
                <prop key="hibernate.cglib.use_reflection_optimizer">
                    false
                </prop>
            </props>
        </property>
    </bean>
    
    <bean id="beanLocator" class="tavant.fleet.integration.server.common.BeanLocator" />

	<bean id="propertiesBean" class="tavant.fleet.integration.server.common.PropertiesBean">
		<property name="integrationURL" value="${twms.integration.url}" />
		<property name="serviceChannelURL" value="${serviceChannel.webservice.url}" />
		<property name="action" value="${serviceChannel.webservice.action}" />
		<property name="userName" value="${serviceChannel.webservice.username}" />	
		<property name="password" value="${serviceChannel.webservice.password}" />	
		<property name="storeID" value="${serviceChannel.webservice.storeID}" />	
		<property name="customerID" value="${serviceChannel.webservice.customerID}" />
		<property name="telemetryURL" value="${telemetry.webservice.url}" />
		<property name="telemetryAction" value="${telemetry.webservice.action}" />
		<property name="telemetryUsername" value="${telemetry.username}" />
		<property name="telemetryPassWord" value="${telemetry.password}" />
		<property name="failureCodeAction" value="${failureCode.webservice.action}" />
		<!-- End of Changes -->
	</bean>

    <bean id="jdbcTemplate"
          class="org.springframework.jdbc.core.JdbcTemplate"/>


    <bean id="hibernateTemplate"
          class="org.springframework.orm.hibernate3.HibernateTemplate"/>

   <!--  <bean id="syncServerResponseTransformer"
          class="tavant.fleet.integration.server.common.SyncServerResponseTransformer"/> -->

    <bean id="transactionManager"
          class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- enable the configuration of transactional behavior based on annotations -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"/>
    <bean class="org.springframework.transaction.interceptor.TransactionAttributeSourceAdvisor">
        <property name="transactionInterceptor" ref="txnInterceptor"/>
    </bean>
    <bean id="txnInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributeSource">
            <bean class="org.springframework.transaction.annotation.AnnotationTransactionAttributeSource"/>
        </property>
    </bean>

    <bean id="syncTrackerDao"
          class="tavant.fleet.integration.server.common.dataaccess.SyncTrackerDAOImpl">
        <property name="maxResults">
            <value>10</value>
        </property>
        <property name="failureCountThreshold">
            <value>2</value>
        </property>
    </bean>

    <!-- Spring HTTP invoker (uses the standard Java serialization mechanism to expose services through HTTP)
         configuration to expose IntegrationService (defined in integration-layer module) -->
    <bean id="integrationServiceProxy" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
        <property name="serviceUrl" value="${twms.integration.url}"/>
        <property name="serviceInterface" value="tavant.fleet.integration.layer.IntegrationService"/>
    </bean>

    <!-- Interceptor which logs incoming requests to Sync_tracker table -->
    <bean id="inboundSyncInterceptor" class="tavant.fleet.integration.server.sync.inbound.InboundSyncInterceptor" />

    <!-- Proxy to intercept calls to IntegrationService (defined in integration-layer module) -->
    <bean id="integrationService" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="proxyInterfaces" value="tavant.fleet.integration.layer.IntegrationService" />
        <property name="interceptorNames" value="inboundSyncInterceptor" />
        <property name="target" ref="integrationServiceProxy" />
    </bean>



    <bean id="healthCheckService"
          class="tavant.fleet.integration.server.common.HealthCheckServiceImpl"/>

    
</beans>
